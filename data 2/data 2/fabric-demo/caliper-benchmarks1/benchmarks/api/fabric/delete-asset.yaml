test:
  name: delete-asset-ramp
  description: >-
    This is a duration based benchmark targeting a Hyperledger Fabric network
    using the `fixed-asset` NodeJS chaincode
    contract that is interacted with via a Fabric-SDK-Node Gateway. Each test
    round invokes the 'deleteAsset' method. Successive rounds delete a-priori
    created assets of larger byteSize.
  workers:
    number: 5
  rounds:
    - label: delete-asset-100
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `deleteAsset`. This method
        performs a deleteState on an item that matches an asset of size 100
        bytes.
      chaincodeID: fixed-asset
      txNumber: 4000
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 20
          startingTps: 10
      workload:
        module: benchmarks/api/fabric/workloads/delete-asset.js
        arguments:
          chaincodeID: fixed-asset
          create_sizes:
            - 100
            - 1000
            - 4000
            - 8000
            - 16000
            - 24000
            - 32000
            - 64000
          assets: 4000
          byteSize: 100
          consensus: true
    - label: delete-asset-1000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `deleteAsset`. This method
        performs a deleteState on an item that matches an asset of size 1000
        bytes.
      chaincodeID: fixed-asset
      txNumber: 4000
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 20
          startingTps: 10
      workload:
        module: benchmarks/api/fabric/workloads/delete-asset.js
        arguments:
          chaincodeID: fixed-asset
          noSetup: true
          assets: 4000
          byteSize: 1000
          consensus: true
    - label: delete-asset-4000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `deleteAsset`. This method
        performs a deleteState on an item that matches an asset of size 4000
        bytes.
      chaincodeID: fixed-asset
      txNumber: 4000
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 20
          startingTps: 10
      workload:
        module: benchmarks/api/fabric/workloads/delete-asset.js
        arguments:
          chaincodeID: fixed-asset
          noSetup: true
          byteSize: 4000
          assets: 4000
          consensus: true
    - label: delete-asset-8000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `deleteAsset`. This method
        performs a deleteState on an item that matches an asset of size 8000
        bytes.
      chaincodeID: fixed-asset
      txNumber: 4000
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 20
          startingTps: 10
      workload:
        module: benchmarks/api/fabric/workloads/delete-asset.js
        arguments:
          chaincodeID: fixed-asset
          noSetup: true
          byteSize: 8000
          assets: 4000
          consensus: true
    - label: delete-asset-16000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `deleteAsset`. This method
        performs a deleteState on an item that matches an asset of size 16000
        bytes.
      chaincodeID: fixed-asset
      txNumber: 4000
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 20
          startingTps: 10
      workload:
        module: benchmarks/api/fabric/workloads/delete-asset.js
        arguments:
          chaincodeID: fixed-asset
          noSetup: true
          byteSize: 16000
          assets: 4000
          consensus: true
    - label: delete-asset-24000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `deleteAsset`. This method
        performs a deleteState on an item that matches an asset of size 24000
        bytes.
      chaincodeID: fixed-asset
      txNumber: 4000
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 20
          startingTps: 10
      workload:
        module: benchmarks/api/fabric/workloads/delete-asset.js
        arguments:
          chaincodeID: fixed-asset
          noSetup: true
          byteSize: 24000
          assets: 4000
          consensus: true
    - label: delete-asset-32000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `deleteAsset`. This method
        performs a deleteState on an item that matches an asset of size 32000
        bytes.
      chaincodeID: fixed-asset
      txNumber: 4000
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 20
          startingTps: 10
      workload:
        module: benchmarks/api/fabric/workloads/delete-asset.js
        arguments:
          chaincodeID: fixed-asset
          noSetup: true
          byteSize: 32000
          assets: 4000
          consensus: true
    - label: delete-asset-64000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `deleteAsset`. This method
        performs a deleteState on an item that matches an asset of size 64000
        bytes.
      chaincodeID: fixed-asset
      txNumber: 4000
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 20
          startingTps: 10
      workload:
        module: benchmarks/api/fabric/workloads/delete-asset.js
        arguments:
          chaincodeID: fixed-asset
          noSetup: true
          byteSize: 64000
          assets: 4000
          consensus: true
    - label: delete-asset-8000-fixed-tps
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `deleteAsset`. This method
        performs a deleteState on an item that matches an asset of size 8000
        bytes at a fixed TPS.
      chaincodeID: fixed-asset
      txNumber: 4000
      rateControl:
        type: fixed-rate
        opts:
          tps: 350
      workload:
        module: benchmarks/api/fabric/workloads/delete-asset.js
        arguments:
          chaincodeID: fixed-asset
          noSetup: true
          byteSize: 8000
          assets: 4000
          consensus: true
monitors:
    resource:
    - module: prometheus
      options:
        url: "http://localhost:9090"
        metrics:
          include: [dev-.*, couch, peer, orderer]
          queries:
          - name: Avg Memory (MB)
            query: 'sum(container_memory_rss{name=~".+"}) by (name)'
            step: 10
            label: name
            statistic: avg
            multiplier: 0.000001
          - name:   CPU (%)
            query: sum(rate(container_cpu_usage_seconds_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: avg
            multiplier: 100
          - name: Network In (MB)
            query: sum(rate(container_network_receive_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001
          - name: Network Out (MB)
            query: sum(rate(container_network_transmit_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001
          - name: Disc Write (MB)
            query: sum(rate(container_fs_writes_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001
          - name: Disc Read (MB)
            query: sum(rate(container_fs_reads_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001