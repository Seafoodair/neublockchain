test:
  name: fixed-tps-runs
  description: Benchmark run to enable resource comparison for benchmarks
  workers:
    number: 10
  rounds:
    - label: create-asset-8000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `createAsset`, which inserts
        an asset of size 8000 bytes into the World State database.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-rate
        opts:
          tps: 100
      workload:
        module: benchmarks/api/fabric/workloads/create-asset.js
        arguments:
          chaincodeID: fixed-asset
          byteSize: 8000
    - label: create-asset-batch-20-8000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `createAssetsFromBatch`, which
        inserts a batch of 20 assets of size 8k bytes into the World State
        database.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-rate
        opts:
          tps: 100
      workload:
        module: benchmarks/api/fabric/workloads/batch-create-asset.js
        arguments:
          chaincodeID: fixed-asset
          byteSize: 8000
          batchSize: 20
    - label: get-asset-evaluate-8000
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `getAsset`. This method
        performs a getState on an item that matches an asset of size 8000 bytes.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-rate
        opts:
          tps: 100
      workload:
        module: benchmarks/api/fabric/workloads/get-asset.js
        arguments:
          chaincodeID: fixed-asset
          create_sizes:
            - 100
            - 1000
            - 2000
            - 4000
            - 8000
            - 16000
            - 32000
            - 64000
          byteSize: 8000
          assets: 1000
          consensus: false
    - label: get-asset-batch-evaluate-20-8000
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `getAssetsFromBatch`. This
        method performs a getState on a batch of 20 UUIDs that each match an
        asset of size 8000 bytes.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-rate
        opts:
          tps: 50
      workload:
        module: benchmarks/api/fabric/workloads/batch-get-asset.js
        arguments:
          chaincodeID: fixed-asset
          create_sizes:
            - 8000
          assets: 8000
          byteSize: 8000
          batchSize: 20
          consensus: false
    - label: mixed-range-query-evaluate-20
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `paginatedRangeQuery`. This
        method performs a paginated range query, with a passed pagesize of 20
        and a range keys that bound 200 assets created by the calling client.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-rate
        opts:
          tps: 30
      workload:
        module: benchmarks/api/fabric/workloads/mixed-range-query-asset.js
        arguments:
          chaincodeID: fixed-asset
          range: 200
          offset: 100
          pagesize: '20'
          create_sizes:
            - 100
            - 1000
            - 2000
            - 4000
            - 8000
            - 16000
            - 32000
            - 64000
          consensus: false
monitors:
    resource:
    - module: prometheus
      options:
        url: "http://localhost:9090"
        metrics:
          include: [dev-.*, couch, peer, orderer]
          queries:
          - name: Avg Memory (MB)
            query: 'sum(container_memory_rss{name=~".+"}) by (name)'
            step: 10
            label: name
            statistic: avg
            multiplier: 0.000001
          - name:   CPU (%)
            query: sum(rate(container_cpu_usage_seconds_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: avg
            multiplier: 100
          - name: Network In (MB)
            query: sum(rate(container_network_receive_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001
          - name: Network Out (MB)
            query: sum(rate(container_network_transmit_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001
          - name: Disc Write (MB)
            query: sum(rate(container_fs_writes_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001
          - name: Disc Read (MB)
            query: sum(rate(container_fs_reads_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001