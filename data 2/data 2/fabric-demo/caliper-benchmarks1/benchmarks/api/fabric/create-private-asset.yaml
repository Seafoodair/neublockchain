test:
  name: create-private-asset
  description: >-
    This is a duration based benchmark targeting a Hyperledger Fabric network
    using the `fixed-asset` NodeJS chaincode
    contract that is interacted with via a Fabric-SDK-Node Gateway. Each test
    round invokes the `createPrivateAsset` method, with successive rounds
    increasing the byteSize of the asset added into the Private Data 
    Collection of the authorized organization.
  workers:
    number: 5
  rounds:
    - label: create-private-asset-8000-fixed-tps
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `createPrivateAsset`, which
        inserts an asset of size 8000 bytes into the Private Data Collection
        of the authorized organization at a fixed TPS rate.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-rate
        opts:
          tps: 15
      workload:
        module: benchmarks/api/fabric/workloads/create-private-asset.js
        arguments:
          chaincodeID: fixed-asset
          byteSize: 8000
    - label: create-private-asset-100
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `createPrivateAsset`, which
        inserts an asset of size 100 bytes into the Private Data Collection
        of the authorized organization.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 10
          startingTps: 1
      workload:
        module: benchmarks/api/fabric/workloads/create-private-asset.js
        arguments:
          chaincodeID: fixed-asset
          byteSize: 100
    - label: create-private-asset-200
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `createPrivateAsset`, which
        inserts an asset of size 200 bytes into the Private Data Collection
        of the authorized organization.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 10
          startingTps: 1
      workload:
        module: benchmarks/api/fabric/workloads/create-private-asset.js
        arguments:
          chaincodeID: fixed-asset
          byteSize: 200
    - label: create-private-asset-500
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `createPrivateAsset`, which
        inserts an asset of size 500 bytes into the Private Data Collection
        of the authorized organization.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 10
          startingTps: 1
      workload:
        module: benchmarks/api/fabric/workloads/create-private-asset.js
        arguments:
          chaincodeID: fixed-asset
          byteSize: 500
    - label: create-private-asset-1000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `createPrivateAsset`, which
        inserts an asset of size 1000 bytes into the Private Data Collection
        of the authorized organization.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 10
          startingTps: 1
      workload:
        module: benchmarks/api/fabric/workloads/create-private-asset.js
        arguments:
          chaincodeID: fixed-asset
          byteSize: 1000
    - label: create-private-asset-2000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `createPrivateAsset`, which
        inserts an asset of size 2000 bytes into the Private Data Collection
        of the authorized organization.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 10
          startingTps: 1
      workload:
        module: benchmarks/api/fabric/workloads/create-private-asset.js
        arguments:
          chaincodeID: fixed-asset
          byteSize: 2000
    - label: create-private-asset-5000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `createPrivateAsset`, which
        inserts an asset of size 5000 bytes into the Private Data Collection
        of the authorized organization.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 10
          startingTps: 1
      workload:
        module: benchmarks/api/fabric/workloads/create-private-asset.js
        arguments:
          chaincodeID: fixed-asset
          byteSize: 5000
    - label: create-private-asset-10000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `createPrivateAsset`, which
        inserts an asset of size 10000 bytes into the Private Data Collection 
        of the authorized organization.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 10
          startingTps: 1
      workload:
        module: benchmarks/api/fabric/workloads/create-private-asset.js
        arguments:
          chaincodeID: fixed-asset
          byteSize: 10000
monitors:
    resource:
    - module: prometheus
      options:
        url: "http://localhost:9090"
        metrics:
          include: [dev-.*, couch, peer, orderer]
          queries:
          - name: Avg Memory (MB)
            query: 'sum(container_memory_rss{name=~".+"}) by (name)'
            step: 10
            label: name
            statistic: avg
            multiplier: 0.000001
          - name:   CPU (%)
            query: sum(rate(container_cpu_usage_seconds_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: avg
            multiplier: 100
          - name: Network In (MB)
            query: sum(rate(container_network_receive_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001
          - name: Network Out (MB)
            query: sum(rate(container_network_transmit_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001
          - name: Disc Write (MB)
            query: sum(rate(container_fs_writes_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001
          - name: Disc Read (MB)
            query: sum(rate(container_fs_reads_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001