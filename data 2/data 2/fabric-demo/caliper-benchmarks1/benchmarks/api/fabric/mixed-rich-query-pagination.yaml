test:
  name: fixed-asset-mixed-rich-query-pagination
  description: >-
    This is a duration based benchmark targeting a Hyperledger Fabric network
    using the `fixed-asset` NodeJS chaincode
    contract that is interacted with via a Fabric-SDK-Node Gateway. Each test
    round invokes the 'pageinatedRichQuery' chaincode method.  Successive rounds
    increase the pagesize of retrieved assets.
  workers:
    number: 4
  rounds:
    - label: mixed-rich-query-evaluate-10
      description: >-
        Test a evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `paginatedRichQuery`.  This
        method performs a paginated rich query, with a passed pagesize of 10 and
        query string that matches all assets created by the calling client. Each
        returned asset is of size 8000 bytes.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 5
          startingTps: 5
      workload:
        module: benchmarks/api/fabric/workloads/mixed-rich-query-asset.js
        arguments:
          chaincodeID: fixed-asset
          create_sizes:
            - 100
            - 1000
            - 2000
            - 4000
            - 8000
          assets: 2000
          pagesize: '10'
          consensus: false
    - label: mixed-rich-query-evaluate-20
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `paginatedRichQuery`. This
        method performs a paginated rich query, with a passed pagesize of 20 and
        query string that matches all assets created by the calling client. Each
        returned asset is of size 8000 bytes.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 5
          startingTps: 5
      workload:
        module: benchmarks/api/fabric/workloads/mixed-rich-query-asset.js
        arguments:
          chaincodeID: fixed-asset
          create_sizes:
            - 100
            - 1000
            - 2000
            - 4000
            - 8000
          pagesize: '20'
          noSetup: true
          consensus: false
    - label: mixed-rich-query-evaluate-50
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `paginatedRichQuery`. This
        method performs a paginated rich query, with a passed pagesize of 50 and
        query string that matches all assets created by the calling client. Each
        returned asset is of size 8000 bytes.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 5
          startingTps: 5
      workload:
        module: benchmarks/api/fabric/workloads/mixed-rich-query-asset.js
        arguments:
          chaincodeID: fixed-asset
          create_sizes:
            - 100
            - 1000
            - 2000
            - 4000
            - 8000
          pagesize: '50'
          noSetup: true
          consensus: false
    - label: mixed-rich-query-evaluate-100
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `paginatedRichQuery`. This
        method performs a paginated rich query, with a passed pagesize of 100
        and query string that matches all assets created by the calling client.
        Each returned asset is of size 8000 bytes.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 5
          startingTps: 5
      workload:
        module: benchmarks/api/fabric/workloads/mixed-rich-query-asset.js
        arguments:
          chaincodeID: fixed-asset
          create_sizes:
            - 100
            - 1000
            - 2000
            - 4000
            - 8000
          pagesize: '100'
          noSetup: true
          consensus: false
    - label: mixed-rich-query-evaluate-200
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `paginatedRichQuery`. This
        method performs a paginated rich query, with a passed pagesize of 200
        and query string that matches all assets created by the calling client.
        Each returned asset is of size 8000 bytes.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 5
          startingTps: 5
      workload:
        module: benchmarks/api/fabric/workloads/mixed-rich-query-asset.js
        arguments:
          chaincodeID: fixed-asset
          create_sizes:
            - 100
            - 1000
            - 2000
            - 4000
            - 8000
          pagesize: '200'
          noSetup: true
          consensus: false
    - label: mixed-rich-query-evaluate-500
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `paginatedRichQuery`. This
        method performs a paginated rich query, with a passed pagesize of 500
        and query string that matches all assets created by the calling client.
        Each returned asset is of size 8000 bytes.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 5
          startingTps: 5
      workload:
        module: benchmarks/api/fabric/workloads/mixed-rich-query-asset.js
        arguments:
          chaincodeID: fixed-asset
          create_sizes:
            - 100
            - 1000
            - 2000
            - 4000
            - 8000
          pagesize: '500'
          noSetup: true
          consensus: false
monitors:
    resource:
    - module: prometheus
      options:
        url: "http://localhost:9090"
        metrics:
          include: [dev-.*, couch, peer, orderer]
          queries:
          - name: Avg Memory (MB)
            query: 'sum(container_memory_rss{name=~".+"}) by (name)'
            step: 10
            label: name
            statistic: avg
            multiplier: 0.000001
          - name:   CPU (%)
            query: sum(rate(container_cpu_usage_seconds_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: avg
            multiplier: 100
          - name: Network In (MB)
            query: sum(rate(container_network_receive_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001
          - name: Network Out (MB)
            query: sum(rate(container_network_transmit_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001
          - name: Disc Write (MB)
            query: sum(rate(container_fs_writes_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001
          - name: Disc Read (MB)
            query: sum(rate(container_fs_reads_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001