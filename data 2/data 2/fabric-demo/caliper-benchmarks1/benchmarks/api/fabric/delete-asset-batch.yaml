test:
  name: delete-asset-batch
  description: >-
    This is a duration based benchmark targeting a Hyperledger Fabric network
    using the `fixed-asset` NodeJS chaincode
    contract that is interacted with via a Fabric-SDK-Node Gateway. Each test
    round invokes the `deleteAssetsFromBatch` API method. Successive rounds
    delete a-priori created assets of larger byte size.
  workers:
    number: 10
  rounds:
    - label: delete-asset-batch-1-8000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `deleteAssetsFromBatch`. This
        method performs a deleteState on a batch of 1 UUID that matches an asset
        of size 8000 bytes.
      chaincodeID: fixed-asset
      txNumber: 4000
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 20
          startingTps: 10
      workload:
        module: benchmarks/api/fabric/workloads/batch-delete-asset.js
        arguments:
          chaincodeID: fixed-asset
          create_sizes:
            - 8000
          assets: 4000
          byteSize: 8000
          batchSize: 1
          consensus: true
    - label: delete-asset-batch-10-8000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `deleteAssetsFromBatch`. This
        method performs a deleteState on a batch of 10 UUIDs that each match an
        asset of size 8000 bytes.
      chaincodeID: fixed-asset
      txNumber: 4000
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 20
          startingTps: 10
      workload:
        module: benchmarks/api/fabric/workloads/batch-delete-asset.js
        arguments:
          chaincodeID: fixed-asset
          create_sizes:
            - 8000
          assets: 40000
          byteSize: 8000
          batchSize: 10
          consensus: true
    - label: delete-asset-batch-20-8000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `deleteAssetsFromBatch`. This
        method performs a deleteState on a batch of 20 UUIDs that each match an
        asset of size 8000 bytes.
      chaincodeID: fixed-asset
      txNumber: 4000
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 20
          startingTps: 10
      workload:
        module: benchmarks/api/fabric/workloads/batch-delete-asset.js
        arguments:
          chaincodeID: fixed-asset
          create_sizes:
            - 8000
          assets: 80000
          byteSize: 8000
          batchSize: 20
          consensus: true
    - label: delete-asset-batch-30-8000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `deleteAssetsFromBatch`. This
        method performs a deleteState on a batch of 30 UUIDs that each match an
        asset of size 8000 bytes.
      chaincodeID: fixed-asset
      txNumber: 1000
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 20
          startingTps: 10
      workload:
        module: benchmarks/api/fabric/workloads/batch-delete-asset.js
        arguments:
          chaincodeID: fixed-asset
          create_sizes:
            - 8000
          assets: 30000
          byteSize: 8000
          batchSize: 30
          consensus: true
    - label: delete-asset-batch-40-8000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `deleteAssetsFromBatch`. This
        method performs a deleteState on a batch of 40 UUIDs that each match an
        asset of size 8000 bytes.
      chaincodeID: fixed-asset
      txNumber: 1000
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 20
          startingTps: 10
      workload:
        module: benchmarks/api/fabric/workloads/batch-delete-asset.js
        arguments:
          chaincodeID: fixed-asset
          create_sizes:
            - 8000
          assets: 40000
          byteSize: 8000
          batchSize: 40
          consensus: true
    - label: delete-asset-batch-50-8000
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `deleteAssetsFromBatch`. This
        method performs a deleteState on a batch of 50 UUIDs that each match an
        asset of size 8000 bytes.
      chaincodeID: fixed-asset
      txNumber: 500
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 20
          startingTps: 10
      workload:
        module: benchmarks/api/fabric/workloads/batch-delete-asset.js
        arguments:
          chaincodeID: fixed-asset
          create_sizes:
            - 8000
          assets: 25000
          byteSize: 8000
          batchSize: 50
          consensus: true
    - label: delete-asset-batch-20-8000-fixed-tps
      description: >-
        Test a submitTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `deleteAssetsFromBatch`. This
        method performs a deleteState on a batch of 20 UUIDs that each match an
        asset of size 8000 bytes at a fixed TPS.
      chaincodeID: fixed-asset
      txNumber: 4000
      rateControl:
        type: fixed-rate
        opts:
          tps: 30
      workload:
        module: benchmarks/api/fabric/workloads/batch-delete-asset.js
        arguments:
          chaincodeID: fixed-asset
          create_sizes:
            - 8000
          assets: 80000
          byteSize: 8000
          batchSize: 20
          consensus: true
monitors:
    resource:
    - module: prometheus
      options:
        url: "http://localhost:9090"
        metrics:
          include: [dev-.*, couch, peer, orderer]
          queries:
          - name: Avg Memory (MB)
            query: 'sum(container_memory_rss{name=~".+"}) by (name)'
            step: 10
            label: name
            statistic: avg
            multiplier: 0.000001
          - name:   CPU (%)
            query: sum(rate(container_cpu_usage_seconds_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: avg
            multiplier: 100
          - name: Network In (MB)
            query: sum(rate(container_network_receive_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001
          - name: Network Out (MB)
            query: sum(rate(container_network_transmit_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001
          - name: Disc Write (MB)
            query: sum(rate(container_fs_writes_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001
          - name: Disc Read (MB)
            query: sum(rate(container_fs_reads_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001