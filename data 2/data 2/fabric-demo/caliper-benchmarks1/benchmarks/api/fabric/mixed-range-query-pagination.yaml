test:
  name: fixed-asset-mixed-range-query-pagination
  description: >-
    This is a duration based benchmark targeting a Hyperledger Fabric network
    using the `fixed-asset` NodeJS chaincode
    contract that is interacted with via a Fabric-SDK-Node Gateway. Each test
    round invokes the 'paginatedRangeQuery' method against a DB populated with
    mixed size assets. Successive rounds increase the pagesize of retrieved
    assets.
  workers:
    number: 4
  rounds:
    - label: mixed-range-query-evaluate-10
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `paginatedRangeQuery`. This
        method performs a paginated range query, with a passed pagesize of 10
        and a range keys that bound 200 assets created by the calling client.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 2
      workload:
        module: benchmarks/api/fabric/workloads/mixed-range-query-asset.js
        arguments:
          chaincodeID: fixed-asset
          create_sizes:
            - 100
            - 1000
            - 2000
            - 4000
            - 8000
            - 16000
            - 32000
            - 64000
          assets: 2000
          range: 200
          offset: 100
          pagesize: '10'
          nomatch: true
          consensus: false
    - label: mixed-range-query-evaluate-20
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `paginatedRangeQuery`. This
        method performs a paginated range query, with a passed pagesize of 20
        and a range keys that bound 200 assets created by the calling client.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 2
      workload:
        module: benchmarks/api/fabric/workloads/mixed-range-query-asset.js
        arguments:
          chaincodeID: fixed-asset
          range: 200
          offset: 100
          pagesize: '20'
          noSetup: true
          consensus: false
    - label: mixed-range-query-evaluate-50
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `paginatedRangeQuery`. This
        method performs a paginated range query, with a passed pagesize of 50
        and a range keys that bound 200 assets created by the calling client.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 2
      workload:
        module: benchmarks/api/fabric/workloads/mixed-range-query-asset.js
        arguments:
          chaincodeID: fixed-asset
          range: 200
          offset: 100
          pagesize: '50'
          noSetup: true
          consensus: false
    - label: mixed-range-query-evaluate-100
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `paginatedRangeQuery`. This
        method performs a paginated range query, with a passed pagesize of 100
        and a range keys that bound 200 assets created by the calling client.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 2
      workload:
        module: benchmarks/api/fabric/workloads/mixed-range-query-asset.js
        arguments:
          chaincodeID: fixed-asset
          range: 200
          offset: 100
          pagesize: '100'
          noSetup: true
          consensus: false
    - label: mixed-range-query-evaluate-200
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `paginatedRangeQuery`. This
        method performs a paginated range query, with a passed pagesize of 200
        and a range keys that bound 200 assets created by the calling client.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 2
      workload:
        module: benchmarks/api/fabric/workloads/mixed-range-query-asset.js
        arguments:
          chaincodeID: fixed-asset
          range: 200
          offset: 100
          pagesize: '200'
          noSetup: true
          consensus: false
    - label: mixed-range-query-evaluate-300
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `paginatedRangeQuery`. This
        method performs a paginated range query, with a passed pagesize of 500
        and a range keys that bound 200 assets created by the calling client.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-load
        opts:
          transactionLoad: 2
      workload:
        module: benchmarks/api/fabric/workloads/mixed-range-query-asset.js
        arguments:
          chaincodeID: fixed-asset
          range: 200
          offset: 100
          pagesize: '300'
          noSetup: true
          consensus: false
    - label: mixed-range-query-evaluate-20-fixed-tps
      description: >-
        Test an evaluateTransaction() Gateway method against the NodeJS
        `fixed-asset` Smart Contract method named `paginatedRangeQuery`. This
        method performs a paginated range query, with a passed pagesize of 20
        and a range keys that bound 200 assets created by the calling client at
        a fixed TPS.
      chaincodeID: fixed-asset
      txDuration: 300
      rateControl:
        type: fixed-rate
        opts:
          tps: 10
      workload:
        module: benchmarks/api/fabric/workloads/mixed-range-query-asset.js
        arguments:
          chaincodeID: fixed-asset
          range: 200
          offset: 100
          pagesize: '20'
          noSetup: true
          consensus: false
monitors:
    resource:
    - module: prometheus
      options:
        url: "http://localhost:9090"
        metrics:
          include: [dev-.*, couch, peer, orderer]
          queries:
          - name: Avg Memory (MB)
            query: 'sum(container_memory_rss{name=~".+"}) by (name)'
            step: 10
            label: name
            statistic: avg
            multiplier: 0.000001
          - name:   CPU (%)
            query: sum(rate(container_cpu_usage_seconds_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: avg
            multiplier: 100
          - name: Network In (MB)
            query: sum(rate(container_network_receive_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001
          - name: Network Out (MB)
            query: sum(rate(container_network_transmit_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001
          - name: Disc Write (MB)
            query: sum(rate(container_fs_writes_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001
          - name: Disc Read (MB)
            query: sum(rate(container_fs_reads_bytes_total{name=~".+"}[1m])) by (name)
            step: 10
            label: name
            statistic: sum
            multiplier: 0.000001